@attribute [Route(NavigationRoutes.ScheduleTaskCreateRoute)]
@attribute [Route($"{NavigationRoutes.ScheduleTaskEditRoute}/{{id:guid}}")]

@inject NavigationManager NavigationManager
@inject IScheduleTaskServices ScheduleTaskServices

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>>@_title</PageTitle>
<h3>@_title</h3>

@if (_categories is null || _priorities is null || ScheduleTaskModel is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="ScheduleTaskModel" OnValidSubmit="HandleValidAsync">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="Category">Category</label>
            <InputSelect id="Category" class="form-select" @bind-Value="ScheduleTaskModel.CategoryId">
                @foreach (var category in _categories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => ScheduleTaskModel.CategoryId)" />
        </div>

        <div class="form-group">
            <label for="Title">Title</label>
            <InputText id="Title" class="form-control" @bind-Value="ScheduleTaskModel.Title" />
            <ValidationMessage For="@(() => ScheduleTaskModel.Title)" />
        </div>

        <div class="form-group">
            <label for="Description">Description</label>
            <InputTextArea id="Description" class="form-control" @bind-Value="ScheduleTaskModel.Description" />
            <ValidationMessage For="@(() => ScheduleTaskModel.Description)" />
        </div>

        <div class="form-group">
            <label for="Priority">Priority</label>
            <InputSelect id="Priority" class="form-control" @bind-Value="ScheduleTaskModel.Priority">
                @foreach (var priority in _priorities)
                {
                    <option value="@priority.Key">@priority.Value</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => ScheduleTaskModel.Priority)" />
        </div>

        <div class="form-group">
            <label for="DueDate">Due Date</label>
            <InputDate id="DueDate" class="form-control" @bind-Value="ScheduleTaskModel.DueDate" />
            <ValidationMessage For="@(() => ScheduleTaskModel.DueDate)" />
        </div>

        <div class="mt-3">
            <button type="submit" class="btn btn-primary">Save</button>
            <a class="btn btn-secondary" role="button" href="@NavigationRoutes.ScheduleTaskListRoute">Cancel</a>
        </div>
    </EditForm>
}

@code {
    private readonly CancellationTokenSource _cts = new();

    private List<ScheduleTaskCategoryModel>? _categories;
    private List<KeyValuePair<string, string>>? _priorities;
    private string _title = string.Empty;

    [Parameter]
    public Guid? Id { get; set; }

    [SupplyParameterFromForm]
    public ScheduleTaskModel? ScheduleTaskModel { get; set; }

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

    protected override async Task OnInitializedAsync()
    {
        var allPriorities = await ScheduleTaskServices.GetAllPrioritiesAsync();
        _priorities = allPriorities.Select(x => new KeyValuePair<string, string>(x.ToString(), x.ToString())).ToList();
        _priorities.Insert(0, new KeyValuePair<string, string>("", "Select a priority..."));

        _categories = await ScheduleTaskServices.GetAllCategoriesAsync(_cts.Token);
        _categories.Insert(0, new ScheduleTaskCategoryModel { Id = Guid.Empty, Name = "Select a category..." });
    }


    protected override async Task OnParametersSetAsync()
    {
        if (ScheduleTaskModel is not null)
        {
            return;
        }

        if (Id.HasValue)
        {
            ScheduleTaskModel = await ScheduleTaskServices.GetTaskAsync(Id.Value, _cts.Token);

            _title = $"Edit Schedule Task: '{ScheduleTaskModel.Title}'";

        }
        else
        {
            ScheduleTaskModel = new ScheduleTaskModel
            {
                DueDate = DateTime.UtcNow.Date
            };

            _title = "New Schedule Task";               
        }
    }

    private async Task HandleValidAsync()
    {
        if (ScheduleTaskModel is null)
        {
            return;
        }

        await ScheduleTaskServices.UpsertTaskASync(ScheduleTaskModel, _cts.Token);

        NavigationManager.NavigateTo(NavigationRoutes.ScheduleTaskListRoute);
    }
}
